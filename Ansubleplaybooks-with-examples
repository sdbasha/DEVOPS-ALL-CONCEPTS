Example Ansible Playbook with multiple hosts and multiple plays.
Here is the ansible playbook with multiple hosts in it.  
You can see we are working with web and application servers in the same playbook and executing two different plays (set of tasks) respectively.

======================================================================================================================================================


---
  # Play1 - WebServer related tasks
  - name: Play Web - Create apache directories and username in web servers
    hosts: webservers
    become: yes
    become_user: root
    tasks:
      - name: create username apacheadm
        user:
          name: apacheadm
          group: users,admin
          shell: /bin/bash
          home: /home/weblogic

      - name: install httpd
        yum:
          name: httpd
          state: installed
        
  # Play2 - Application Server related tasks
  - name: Play app - Create tomcat directories and username in app servers
    hosts: appservers
    become: yes
    become_user: root
    tasks:
      - name: Create a username for tomcat
        user:
          name: tomcatadm
          group: users
          shell: /bin/bash
          home: /home/tomcat

      - name: create a directory for apache tomcat
        file:
          path: /opt/oracle
          owner: tomcatadm
          group: users
          state: present
          mode: 0755
          
          
          
 ===========================================================================================================================================
 
 
 How to Execute an Ansible Playbook::
 
 # ansible-playbook sampleplaybook.yml -i ansible_hosts
 
 
 How to Dry Run the playbook without making Actual Changes
 
 # ansible-playbook -C sampleplaybook.yml -i ansible_hosts
 
 How to Perform a Syntax Check on the Playbook
 
 # ansible-playbook --syntax-check sampleplaybook.yml -i ansible_hosts
 
 How to use Variables in Ansible Playbook
 
 ------>> vars to define inline variables within the playbook

------->> vars_files to import files with variables

---
  - name: Playbook
    hosts: webservers
    become: yes
    become_user: root
    vars:
       key_file:  /etc/apache2/ssl/mywebsite.key
       cert_file: /etc/apache2/ssl/mywebsite.cert
       server_name: www.mywebsite.com
    tasks:
      - name: ensure apache is at the latest version
        yum:
          name: httpd
          state: latest
      ### SOME MORE TASKS WOULD COME HERE ###
      # you can refer the variable you have defined earlier like this #
      # "{{key_file}}"  (or) "{{cert_file}}" (or) "{{server_name}}" #
      ##
      - name: ensure apache is running
        service:
          name: httpd
          state: started
          
=================================================================================================================================
=================================================================================================================================

------------->>> and the variables can be referred with the jinja2 template later"{{ variable name }}"

--------------->> If you want to keep the variables in a separate file and import it with vars_files


---
  - name: Playbook
    hosts: webservers
    become: yes
    become_user: root
    vars_files:
        - apacheconf.yml
    tasks:
      - name: ensure apache is at the latest version
        yum:
          name: httpd
          state: latest
      ### SOME MORE TASKS WOULD COME HERE ###
      # you can refer the variable you have defined earlier like this #
      # "{{key_file}}"  (or) "{{cert_file}}" (or) "{{server_name}}" #
      ##
      - name: ensure apache is running
        service:
          name: httpd
          state: started
          
===================================================================================================================
====================================================================================================================

Example Ansible Playbook to Setup LAMP stack


---
- name: Setting up LAMP Website
  user: vagrant
  hosts: testserver
  become: yes
  tasks:
    - name: latest version of all required packages installed
      yum:
        name:
          - firewalld
          - httpd
          - mariadb-server
          - php
          - php-mysql
        state: latest

    - name: firewalld enabled and running
      service:
        name: firewalld
        enabled: true
        state: started

    - name: firewalld permits http service
      firewalld:
        service: http
        permanent: true
        state: enabled
        immediate: yes

    - name: Copy mime.types file
      copy:
        src: /etc/mime.types
        dest: /etc/httpd/conf/mime.types
        remote_src: yes

    - name: httpd enabled and running
      service:
        name: httpd
        enabled: true
        state: started

    - name: mariadb enabled and running
      service:
        name: mariadb
        enabled: true
        state: started

    - name: copy the php page from remote using get_url
      get_url:
        url: "https://www.middlewareinventory.com/index.php"
        dest: /var/www/html/index.php
        mode: 0644

    - name: test the webpage/website we have setup
      uri:
        url: http://{{ansible_hostname}}/index.php
        status_code: 200
        
        
=========================================================================================

Compressing the Directory with TAR


---
 - name: Ansible archive Examples
   user: vagrant
   hosts: testserver
   tasks:
    - name: Compress Directory contents
      become: yes
      archive:
        path: /apps/tomcat
        dest: /apps/tomcat.tar  
        format: tar
        
        
Playbook without Unarchive â€“ A usual approach


---
- name: Playbook to copy file and uncompress
  hosts: appservers
  vars:
    - userid : "weblogic"
    - oracle_home: "/opt/oracle"
    - jdk_instl_file: "server-jre-8u191-linux-x64.tar.gz"

  tasks:
  - name : Copy the Java JDK files
    become: yes
    become_user: "{{ userid }}"
    tags: app,cpbinaries
    copy:
      src: "{{ item }}"
      dest: "{{ oracle_home }}"
      mode: 0755
    with_items:
      - "{{ jdk_instl_file }}"

  - name: Install java
    become: yes
    become_user: "{{ userid }}"
    tags: javainstall
    shell: "tar xvfz {{ oracle_home }}/{{ jdk_instl_file }}"
    args:
      chdir: "{{ oracle_home }}"
    register: javainstall
    
    
    
    =============================================================================================
    
    Execute a Single Command with Ansible Shell
    
    ---
  - name: Shell Examples
    hosts: testservers
    tasks:

    - name: Check Date with Shell command
      shell:
         "date"
      register: datecmd
      tags: datecmd

    - debug: msg="{{datecmd.stdout}}"
    
    ---
  - name: Shell Examples
    hosts: testservers
    tasks:

    - name: Dir list and write to file
      shell:
         " ls -lrt /apps|awk '{print $9}'|sed '/^$/d' > /tmp/dirlist.txt "
      register: lsout
      tags: lsout

    - name: Display the file
      shell: cat /tmp/dirlist.txt
      register: displaylist
      
    - debug: msg="{{displaylist.stdout_lines}}"
    
    
=====================================================================================================


Vagrant is a tool for building and managing virtual machine environments in a single workflow. With an easy-to-use workflow and focus on automation.



