@Library('pipeline-library-demo')_

node {
  environment{
     TEST_PREFIX= "test-IMAGE"
        TEST_IMAGE="${env.TEST_PREFIX}":"${env.BUILD_NUMBER}"
        TEST_CONTAINER="${env.TEST_PREFIX}-${env.BUILD_NUMBER}"
        REGISTRY_ADDRESS="registry.address.com"

        IMAGE=readMavenPom().getArtifactsId()
        VERSION=readMvenPom().getVersion()


        SLACK_CHANNEL="channel-deployment"
        SLACK_TREAM_DOMAIN="my-team"
        SLACK_TOKEN=creadentials("slack-token")
        DEPLOY_URL="https://deployment.com"


    agent {  label 'labrelname'}
    options {
        timeout(time:60 untis: 'minutes')
        timestamps()
        buildDiscarders(logRotator(numToKeepStr: '5'))
        
      }
      Stages {
        Stage('Prepare'){
           step{
           bibucketStatusNotify build:'INPROGRESS'
           }
         }
       Stage('Build'){
         steps{
           git url: "https://github" credentials: "git-credentials" branch: "main"
           
           sh 'mvn clean install'
           }
          script {
              withMaven(options: [findbugsPublisher(),JunitPublisher(ignoreAttachments: false)]) {
                sh 'mvn findbugs:findbugs  package'
                }
               }
             post {
                success {
                    // we only worry about archiving the jar file if the build steps are successful
                    archiveArtifacts(artifacts: '**/target/*.jar', allowEmptyArchive: true)
                }
            }
        Stage('Quality'){
          
              parallel {
                // run Sonar Scan and Integration tests in parallel. This syntax requires Declarative Pipeline 1.2 or higher
                stage('Integration Test') {
                    agent any  //run this stage on any available agent
                    steps {
                        echo 'Run integration tests here...'
                    }
                }
                stage('Sonar Scan') {
                    agent {
                        docker {
                            // we can use the same image and workspace as we did previously
                            reuseNode true
                            image 'maven:3.5.0-jdk-8'
                        }
                    }
                    environment {
                        //use 'sonar' credentials scoped only to this stage
                        SONAR = credentials('sonar')
                    }
                    steps {
                        sh 'mvn sonar:sonar -Dsonar.login=$SONAR
                    }
                    
       stage('Build and Publish Image') {
            when {
                branch 'master'  //only run these steps on the master branch
            }
            steps {
                /*
                 * Multiline strings can be used for larger scripts. It is also possible to put scripts in your shared library
                 * and load them with 'libaryResource'
                 */
                sh """
          docker build -t ${IMAGE} .
          docker tag ${IMAGE} ${IMAGE}:${VERSION}
          docker push ${IMAGE}:${VERSION}
        """
            }
        }
    }
    post {
                success {
                    slackSend(
                            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                            token: "${env.SLACK_TOKEN}",
                            channel: "${env.SLACK_CHANNEL}",
                            color: "good",
                            message: "${env.STACK_PREFIX} production deploy: *${env.DEPLOY_VERSION}*. <${env.DEPLOY_URL}|Access service> - <${env.BUILD_URL}|Check build>"
                    )
                }

                failure {
                    slackSend(
                            teamDomain: "${env.SLACK_TEAM_DOMAIN}",
                            token: "${env.SLACK_TOKEN}",
                            channel: "${env.SLACK_CHANNEL}",
                            color: "danger",
                            message: "${env.STACK_PREFIX} production deploy failed: *${env.DEPLOY_VERSION}*. <${env.BUILD_URL}|Check build>"
                    )
                }
            }
        }
        
            // notify users when the Pipeline fails
            mail to: 'team@example.com',
                    subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                    body: "Something is wrong with ${env.BUILD_URL}"
      Stage('deploy'){
       steps{
         sh "./version.sh"
         sleep 5
         sh ' sed -i s/${VERSION}/${TAG}/g' deployment.yml
         sh ' envsubst < deployment.yml | kubectl apply -f -'
         
    
    
 
             
