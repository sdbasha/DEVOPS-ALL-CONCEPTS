what is kubernetes??

kubernetes is container orchastration tool that manages container life cycke and pod lyfecycle
with help of k8s objects like pods deployments, replicaset, sevices.. kubernetes has
feature to autoscale deployments and supports depolyements strategy and it has many features
like networking, storage, pv, pvc and many other concepts in kubernetes
k8s can manages small to big-application and it can cloud envirement.

what is kubernetes architecture??

kubernetes has server and client architecture. in k8s we have master and worker node
master node responcible for doing all the work like pod scheduling, and can manage nodes also
master node has coponants like
kube-api 
kube-proxy
kubelete
scheduler-manager
controller-manager
etcd

in worker-node we have componants like

docker
kube-proxy
kubelete

kube-api>>> kube api service is responsible for communicate with all the nodes and cluster operations
also done by kube-api server. api server acts as frontend in cluster. api server uses kube config file
for communication in cluster. when any kubectl commands enterd or run in that recieves api and cmpleates
the work



etcd>>> etcd is a data-base in cluster 
etcd stores configuration information of nodes and cluster. it stores information as key value
that inforamtion accessed by api server


scheduler>>> scheduler is service in k8s cluster that is responsible for distributing and scheduling 
workload to required nodes

kubelete>>>kubelete is a smallest sevice and a daemon service in cluster that is responsible for
fetching information from etcd and creates pods and services and it will manage state od work
on node. it also manages network rule, port farwarding and etc..

kube proxy>>> kube proxy is a service which runs on each node. kubeproxy is responsible making service
available to exeternal. and also kube proxy helps to foarwording request to  container
it manages pods on nodes, volumes, secrets and container health


docker>>> docker is used to create and manage containers for k8s and it can help to pulling images

controller>>> controllers in k8s like deployement controller, ingress controller,statefulset controller
are responsible for perform task that is colling information from user and sending to api server
these controllers are manages the pod lifecycles and its volume as well as network


what is a pod in k8s??

pod is a collection of containers in k8s and also manages the storage and network of containers
it is an abstraction layer of container. which always monitor and manges the container lifcycle

to create a pod>>>"kubectl run nginx image=nginix:2.0 --dry-run -o yml > pod.yml"


pod-life-cycle>>> when we create a pod that has a state and mode that tells about the life of pod
that is called pod-life-cycle.
it has states like
pending
running
succeeded
failed
crashloopBackoff

pod doesn't support auto-healing and auto scaling we need to use higher k8s obejects like deployments

labels>>> labels are the mechanism that used to organise k8s objects
labels are key-value pairs that can be attached to . labels are similar tags
labels gives more uniqueness with help if label a service can be easily find out pod

label-selectors/selectors>>> these are the like tags are like variable which helps or allows to 
select k8s objects.

these are like 
set based selectors>>> this written like name=nginx-pod
                                         node=worker1
set based selectors>>> this is like env=dev
                                    env=testing


RBAC>>>> RBAC is a role based access control that enables user to provide access as cluster level
and namespace level
it has verbs that allows give permissions like ""list,get,watch,delete,create""

what is inint container??

init container is boostrap container.which is runs before th main application container
get started. init container has two charecteristics 
it always runs to compleation
when we need intial action to run before the main container get started we can use this container

for ex:>> copying configuration files and updating config values


lifecycle hooks::>> life cycle hooks are triggers or scripts which run by kubelete during container life
cycle. life cycle hooks allows the users to run specific script in a main container

for ex:>> running a shatdown script before a container terminated

what is pause conatiner??
in every k8s there is empty pause container which starts the pod and
it hleps get cgroup,reservation,namespaces for pod

cgroup>>> is a kernal feature that allows to allowcate resources such as cpu, time, system-memory,
network-bandwidth

what is replication controller??
replication controller is k8s object which is resposible for manging the pos life cycle and it manages the
no. of pods. and it always checks the desired no. of pods to be live


what is relplicaset??

replicaset is a upgraded version object of replication-controller. 
replicaset is responsible for manages
pod lifcycle and it manages the no. of pods. it always check for desired no. of pods which is specified


diffrence between replicaset and replication controller??

the replication controller supports only equality-based selectors
and the replicaset is supports set-based selectors
rolling-update command is used for replicatio controller in template
rollout command is used for replicaset to roll-back the old version


static pod??
static pods are special pods. which are created and manged by kubelete daemon on specific node
without api server interaction. if static pod crashes kublete restars them

ex:>> static pods are used at time of cluster bootstrapping and configuration

kubeadm isntalls all the tools as static pods before installing kube api servers


what is satefulset??

statefull set is a api object work load which is used to mange statefull applications. it manges
deployment and scaling of a set of pods in a ordering manner and unique process.
in stateful set evevry p\od created as individual pods. that unique id and network id
every individual pod in statful set can share their own volume

what is Daemonset ??

Deamon sets are used to runs a copy of pod in all the nodes. we can create when we need to monitor 
any nodes.

what is Deployments??

Deploymemtns are upgrated and hihger version of replication controller. deplymets manges the replicaset
deployments has the capability to update the replicaset and rolleback to previous version.
is has match labels and selectors which helps service to finds the pods.it will record rivision of version and other feature


what is persistant volumes??

persistent volumes are storage at cluster level. it is actually provides by cloud or network provide
ther we can create pv for pods. insteaded of bothering about node resources to use we can create pv

to consume pv we need to claim it that is called pvc


liveness-probe>> liveness probe checks wheather an application of container is healthy or not
if container application is unhealthy livelines probe kills the container and recreates the container

readiness-probe>>> readyness probe check wheather the container is in ready state or not. 
if container state is not ready then readiness probe removes the ip addrr of of container from the enpoint


startup-probe>> start probe checks wheather the application within the container is started or not 
startup probe runs before the all the probes unless it succsessfull it disables the other probes



kubernetes networking>>>>

In kubernetes  networking is central part. that is all about communication and connection of kubernetes
cluster,node and objects. is has fourt types of network concepts

like>>> pod to pod, container to container, pod to service, external to service communications

and node to node communications

if two pods are in different nodes  the communication establkish cluster level
like cluster storing routing table with ip addrr ranges and port forwarding.


what is ingress and ingress-controller??

ingress controller acts as a revers proxy and load balancer. it cotrolles http and https traffic and
reverse proxy to services. and an ingress is an L7 router that routes the traffic using laod balancing
mechanism.the ingress lies on ingress controller. ingress controller sends the traffic to correct service

ingress controller manages L7 and L4 traffic whreas the ingress router routes the http and https

it works on single namespace.


gateway api>>> gate way api act as ingress for cross-namespaces. it sends traffic one namespace to 
anaother namespace

secrets:>> secrets stores sensitive data like base64 formate. it is used for to storing database
user and passwrd

configmaps:>> config maps stores none-sensitive data like plane txt. it is used for to store
any url values or environments variables for pods to access

node-affinity:>> node affinity is like selector or a lablel that is used to slect nodes to scheduler
schedule pods to specific nodes

pod-affinity:>> pod affinity allows to schedular to schedule new pod on same node.usning
topology key: kubernetes.io/hostname

pod-anti-affinity:>> pod anti affinity prevents pods to schedule on same pod

 
=========================================================================

One of the main advantages of using Kubernetes as a container orchestrator is the dynamic scaling of container pods. To enable dynamic scaling, Kubernetes supports three primary forms of autoscaling:

Horizontal Pod Autoscaling (HPA)
A Kubernetes functionality to scale out (increase) or scale in (decrease) the number of pod replicas automatically based on defined metrics.

yaml>>>
apiVersion: apps/v1
kind: Deployment
metadata:
 name: php-apache
 namespace: hpa-test
spec:
 selector:
   matchLabels:
     run: php-apache
 replicas: 1
 template:
   metadata:
     labels:
       run: php-apache
   spec:
     containers:
     - name: php-apache
       image: k8s.gcr.io/hpa-example
       ports:
       - containerPort: 80
       resources:
         limits:
           cpu: 500m
         requests:
           cpu: 200m
---
apiVersion: v1
kind: Service
metadata:
 name: php-apache
 namespace: hpa-test
 labels:
   run: php-apache
spec:
 ports:
 - port: 80
 selector:
   run: php-apache
   
# kubectl -n hpa-test autoscale deployment php-apache --cpu-percent=50 --min=1 --max=5

yml>>>
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
 name: php-apache
 namespace: hpa-test
spec:
 scaleTargetRef:
   apiVersion: apps/v1
   kind: Deployment
   name: php-apache
 minReplicas: 1
 maxReplicas: 10
 targetCPUUtilizationPercentage: 50
 
 # kubectl -n hpa-test run -i --tty load-generator --rm --image=busybox --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- http://php-apache; done"
=================================================================================================

Vertical Pod Autoscaling (VPA)
A Kubernetes functionality to right-size the deployment pods and avoid resource usage problems on the cluster. VPA is more related to capacity planning than other forms of K8s autoscaling.

yml>>>>
apiVersion: autoscaling.k8s.io/v1beta1
kind: VerticalPodAutoscaler
metadata:
  name: nginx-deployment-vpa
spec:
  targetRef:
    apiVersion: "apps/v1"
    kind:       Deployment
    name:       nginx-deployment
  updatePolicy:
    updateMode: "Off"
    


Cluster Autoscaling
A type of autoscaling commonly supported on cloud provider versions of Kubernetes. Cluster Autoscaling can dynamically add and remove worker nodes when a pod is pending scheduling or if the cluster needs to shrink to fit the current number of pods.


=======================================================

TAINTS AND TOLERATIONS

Taints and tolerations are a mechanism that allows you to ensure that pods are not placed on inappropriate nodes. Taints are added to nodes, while tolerations are defined in the pod specification. When you taint a node, it will repel all the pods except those that have a toleration for that taint. A node can have one or many taints associated with it.

A taint can produce three possible effects:

NoSchedule::
The Kubernetes scheduler will only allow scheduling pods that have tolerations for the tainted nodes.

PreferNoSchedule::
The Kubernetes scheduler will try to avoid scheduling pods that don’t have tolerations for the tainted nodes.

NoExecute::
Kubernetes will evict the running pods from the nodes if the pods don’t have tolerations for the tainted nodes.

# kubectl taint nodes nodename dedicated=groupName:NoSchedule
# kubectl taint nodes nodename special=true:NoSchedule

TOLERATIONS>>>
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "3"
  creationTimestamp: "2021-08-29T09:39:37Z"
  generation: 3
  labels:
    run: nginx
  name: nginx
  namespace: frontend
  resourceVersion: "13368509"
  selfLink: /apis/apps/v1/namespaces/frontend/deployments/nginx
  uid: e46e026e-3a92-4aac-b985-7110426aa437
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      run: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        key: app
        operator: Equal
        value: frontend
        
        
============================================================================

SERVICE-DISCOVERY


Service discovery is a mechanism by which services discover each other dynamically without the need for hard coding IP addresses or endpoint configuration.

Server-side service discovery::
Server-side service discovery involves putting a load balancer (LB) in front of the service and letting the load balancer connect to service instances. This process eliminates client-side complexity. The client simply points to the IP or DNS name of the load balance.

Service registry::
Another approach to service discovery is to remove the LB component and implement service discovery on the client-side using a centralized service registry.


Kubernetes service discovery for API-aware clients::
In Kubernetes, an application deployment consists of a pod or set of pods. Those pods are ephemeral, meaning that the IP addresses and ports change constantly. This constant change makes service discovery a significant challenge in the Kubernetes world.

One way Kubernetes provides service discovery is through its endpoints API. With the endpoints API, client software can discover the IP and ports of pods in an application.

In the example below, the Kubernetes control plane ETCD acts as a service registry where all the endpoints are registered and kept up to date by Kubernetes itself. For example, a service mesh can implement logic to use an API for service discovery. That process is the native service discovery provided by Kubernetes.


Kubernetes service discovery using service objects and kube-proxy::
Not all clients are API-aware. Fortunately, Kubernetes provides service discovery in other ways in case the client doesn't use the API directly.

A Kubernetes service object is a stable endpoint that points to a group of pods based on label selectors. It proxies requests to the backend pods using labels and selectors.

Since the pods can come and go dynamically in Kubernetes, a service object serves the purpose of never changing the endpoint or IP address that will point to the list of running pods. The requests are also load-balanced over a set of pods if multiple pods are running in the same application.

The clients can use the DNS name of the Kubernetes service. The internal DNS in Kubernetes handles the mapping of service names to service IP addresses.

Using DNS for name to IP mapping is optional, and Kubernetes can use environment variables for this purpose. When a pod is created, some variables are automatically injected into the pod to map the names to IP addresses. A kube-proxy instance running on each worker node handles the underlying implementation of Kubernetes Service.


============================================================================================================================================

What are Microservices?
Microservices is a service-oriented architecture pattern wherein applications are built as a collection of various smallest independent service units. It is a software engineering approach that focuses on decomposing an application into single-function modules with well-defined interfaces. These modules can be independently deployed and operated by small teams that own the entire lifecycle of the service.


What is Monolithic Architecture?
In layman terms, you can say that Monolithic architecture is like a big container in which all the software components of an application are clubbed into a single package.

What is Microservice Architecture?
Microservice Architecture is an architectural development style that allows building applications as a collection of small autonomous services developed for a business domain. It is a variant of structural style architecture that helps arrange applications as a loosely coupled service collection. The Microservice Architecture contains fine-grained services and lightweight protocols.

Let’s take an example of e-commerce application developed with microservice architecture. In this Microservices architecture example, each microservice is focused on single business capability. Search, Rating & Review and Payment each have their instance (server) and communicate with each other.




